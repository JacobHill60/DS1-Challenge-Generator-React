{"version":3,"sources":["logo.svg","components/DS1challenge.jsx","serviceWorker.js","index.js"],"names":["module","exports","DS1challenge","props","state","message","Array","bonfirelit","expertchallenges","beglevel","easierChallenges","dsclass","Math","floor","random","length","this","setState","bonfire","challexp","challbeg","maxlevel","style","backgroundImage","height","backgroundColor","fontFamily","fontSize","margin","fontWeight","marginBottom","marginTop","marginRight","onClick","startingClass","bind","litBonfire","challengeEXP","easierOnes","onCLick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.feaffa0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nclass DS1challenge extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { message: Array };\r\n    this.state = { bonfirelit: Array };\r\n    this.state = { expertchallenges: Array };\r\n    this.state = { beglevel: Array };\r\n    this.state = { easierChallenges: Array };\r\n  }\r\n\r\n  /*\r\nstartingClass determines the players starting class,\r\nthis is achieved by choosing a random value from the dsclass array.\r\nThe dsclass array is populated with all of the starting Dark Souls 1 classes. \r\n\r\n*/\r\n  startingClass() {\r\n    var dsclass = Array(\r\n      \"Warrior\",\r\n      \"Knight\",\r\n      \"Wanderer\",\r\n      \"Thief\",\r\n      \"Bandit\",\r\n      \"Hunter\",\r\n      \"Sorcerer\",\r\n      \"Pyromancer\",\r\n      \"Cleric\",\r\n      \"Deprived\"\r\n    );\r\n    var dsclass = dsclass[Math.floor(Math.random() * dsclass.length)];\r\n\r\n    this.setState({\r\n      message: dsclass,\r\n    });\r\n  }\r\n  litBonfire() {\r\n    var bonfire = Array(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\r\n    var bonfire = bonfire[Math.floor(Math.random() * bonfire.length)];\r\n\r\n    this.setState({\r\n      bonfirelit: bonfire,\r\n    });\r\n  }\r\n\r\n  challengeEXP() {\r\n    var challexp = Array(\r\n      \"Fat Roll Only\",\r\n      \"Armorless\",\r\n      \"Max Level: 10\",\r\n      \"Only use Fireball Pyromancy to Damage Bosses\",\r\n      \"No Kindling Bonfires\",\r\n      \"No Healing\",\r\n      \"Fist Only\",\r\n      \"Broken Straight Sword Only\",\r\n      \"No Death Run\"\r\n    );\r\n    var challexp = challexp[Math.floor(Math.random() * challexp.length)];\r\n    this.setState({\r\n      expertchallenges: challexp,\r\n    });\r\n  }\r\n\r\n  easierOnes() {\r\n    var challbeg = Array(\r\n      \"Upgrade Weapon Max: Two Times\",\r\n      \"Stick with your Starting Weapon\",\r\n      \"Kill every Enemy in each Area Atleast Once\",\r\n      \"Shieldless & No double handing Weapon\",\r\n      \"No Rolling Against Bosses\",\r\n      \"No Weapon, Spells Only\",\r\n      \"Only Heal Yourself with Spells\"\r\n    );\r\n    var challbeg = challbeg[Math.floor(Math.random() * challbeg.length)];\r\n\r\n    var maxlevel = Array(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30);\r\n    var maxlevel = maxlevel[Math.floor(Math.random() * maxlevel.length)];\r\n\r\n    this.setState({\r\n      easierChallenges: challbeg,\r\n    });\r\n    this.setState({\r\n      beglevel: maxlevel,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <h1\r\n        style={{\r\n          backgroundImage:\r\n            \"url('https://live.staticflickr.com/4510/37432686870_e2fbe88b90_b.jpg')\",\r\n          height: 2000,\r\n        }}\r\n      >\r\n        <span> </span>\r\n        <d1\r\n          style={{\r\n            backgroundColor: \"Gold\",\r\n            fontFamily: \"Adobe Garamond Bold\",\r\n            fontSize: 80,\r\n            margin: 450,\r\n          }}\r\n        >\r\n          {\" \"}\r\n          Dark Souls 1 Randomizer\r\n        </d1>\r\n\r\n        <br />\r\n        <note style={{ backgroundColor: \"Gold\", margin: 450 }}>\r\n          Havel's Shield is OFF LIMITS\r\n        </note>\r\n        <br />\r\n        <button\r\n          style={{\r\n            backgroundColor: \"Lightgreen\",\r\n            fontSize: 40,\r\n            fontWeight: \"bold\",\r\n            fontFamily: \"Adobe Garamond Bold\",\r\n            margin: 200,\r\n            marginBottom: 0,\r\n            marginTop: 100,\r\n            marginRight: 50,\r\n          }}\r\n          onClick={this.startingClass.bind(this)}\r\n        >\r\n          Randomize Starting Class\r\n          <her style={{ backgroundColor: \"red\" }}></her>\r\n        </button>\r\n        <hc style={{ backgroundColor: \"Gold\", margin: 30 }}>\r\n          <span>{this.state.message}</span>\r\n        </hc>\r\n\r\n        <br />\r\n        <button\r\n          style={{\r\n            backgroundColor: \"Lightgreen\",\r\n            fontSize: 40,\r\n            fontWeight: \"bold\",\r\n            fontFamily: \"Adobe Garamond Bold\",\r\n            margin: 200,\r\n            marginBottom: 200,\r\n            marginTop: 50,\r\n            marginRight: 50,\r\n          }}\r\n          onClick={this.litBonfire.bind(this)}\r\n        >\r\n          Bonfires\r\n        </button>\r\n        <hc style={{ backgroundColor: \"Gold\", margin: 100 }}>\r\n          <span>{this.state.bonfirelit}</span>\r\n        </hc>\r\n        <br />\r\n        <br />\r\n        <br />\r\n\r\n        <d1\r\n          style={{\r\n            backgroundColor: \"Pink\",\r\n            fontSize: 80,\r\n            fontFamily: \"Adobe Garamond Bold\",\r\n            margin: 450,\r\n            marginBottom: 50,\r\n          }}\r\n        >\r\n          Expert\r\n        </d1>\r\n\r\n        <br />\r\n        <button\r\n          style={{\r\n            backgroundColor: \"Lightgreen\",\r\n            fontSize: 40,\r\n            fontFamily: \"Adobe Garamond Bold\",\r\n            margin: 200,\r\n            marginBottom: 50,\r\n            marginTop: 100,\r\n            fontWeight: \"bold\",\r\n          }}\r\n          onClick={this.challengeEXP.bind(this)}\r\n        >\r\n          Generate Challenge\r\n        </button>\r\n\r\n        <hc style={{ backgroundColor: \"Pink\", margin: 30 }}>\r\n          {\" \"}\r\n          {this.state.expertchallenges}\r\n        </hc>\r\n\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <d1\r\n          style={{\r\n            backgroundColor: \"Lightblue\",\r\n            fontFamily: \"Adobe Garamond Bold\",\r\n            fontSize: 80,\r\n            margin: 450,\r\n            marginBottom: 50,\r\n            marginTop: 100,\r\n          }}\r\n        >\r\n          Intermediate{\" \"}\r\n        </d1>\r\n        <br />\r\n        <br />\r\n        <button\r\n          style={{\r\n            backgroundColor: \"Lightgreen\",\r\n            fontSize: 40,\r\n            fontFamily: \"Adobe Garamond Bold\",\r\n            margin: 200,\r\n            marginBottom: 50,\r\n            marginTop: 100,\r\n            fontWeight: \"bold\",\r\n          }}\r\n          onClick={this.easierOnes.bind(this)}\r\n        >\r\n          Generate Challenge\r\n        </button>\r\n        <br />\r\n        <d1 style={{ backgroundColor: \"Lightblue\", margin: 200 }}>\r\n          Max Level:{\" \"}\r\n        </d1>\r\n        <span style={{ backgroundColor: \"Lightblue\", marginBottom: 30 }}>\r\n          {this.state.beglevel}\r\n        </span>\r\n        <br />\r\n        <bu\r\n          style={{ backgroundColor: \"Lightblue\", margin: 200 }}\r\n          onCLick={this.easierOnes.bind(this)}\r\n        >\r\n          Challenge:{\" \"}\r\n        </bu>\r\n        <span style={{ backgroundColor: \"Lightblue\", marginBottom: 30 }}>\r\n          {this.state.easierChallenges}\r\n        </span>\r\n      </h1>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DS1challenge;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport DS1challenge from \"./components/DS1challenge\";\n\nReactDOM.render(\n  <DS1challenge />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}